; (defun null. (x)
;   (eq x '()))

(def caar (x) (car (car x)))
(def cadar (x) (car (cdr (car x))))


(def null. (x)
  (id x '()))

; (defun and. (x y)
;   (cond (x (cond (y 't) ('t '())))
;         ('t '())))
(def and. (x y)
  (if x y nil))

; (defun not. (x)
;   (cond (x '())
;         ('t 't)))
(def not. (x)
  (if x nil t))

; (defun append. (x y)
;   (cond ((null. x) y)
;         ('t (cons (car x) (append. (cdr x) y)))))
(def append. (x y)
  (if (null. x) y (cons (car x) (append. (cdr x) y))))

; (defun list. (x y)
;   (cons x (cons y '())))
(def list. (x y)
  (cons x (cons y nil)))

; (defun pair. (x y)
;   (cond ((and. (null. x) (null. y)) '())
;         ((and. (not. (atom x)) (not. (atom y)))
;          (cons (list. (car x) (car y))
;                (pair. (cdr x) (cdr y))))))
(def pair. (x y)
  (if (and. (null. x) (null. y)) nil
      (and. (not. (atom x)) (not. (atom y)))
      (cons (list. (car x) (car y))
            (pair. (cdr x) (cdr y)))))

; (defun assoc. (x y)
;   (cond ((eq (caar y) x) (cadar y))
;         ('t (assoc. x (cdr y)))))
(def assoc. (x y)
  (if (null. y) y
      (id (caar y) x) (cadar y)
      (assoc. x (cdr y))))

(def literal. (x)
  (if (id x t) t
      (id x nil) t
      (atom x) (not. (symbol x))))
         

; (defun eval. (e a)
;   (cond
;     ((atom e) (assoc. e a))
;     ((atom (car e))
;      (cond
;        ((eq (car e) 'quote) (cadr e))
;        ((eq (car e) 'atom)  (atom   (eval. (cadr e) a)))
;        ((eq (car e) 'eq)    (eq     (eval. (cadr e) a)
;                                     (eval. (caddr e) a)))
;        ((eq (car e) 'car)   (car    (eval. (cadr e) a)))
;        ((eq (car e) 'cdr)   (cdr    (eval. (cadr e) a)))
;        ((eq (car e) 'cons)  (cons   (eval. (cadr e) a)
;                                     (eval. (caddr e) a)))
;        ((eq (car e) 'cond)  (evcon. (cdr e) a))
;        ('t (eval. (cons (assoc. (car e) a)
;                         (cdr e))
;                   a))))
;     ((eq (caar e) 'label)
;      (eval. (cons (caddar e) (cdr e))
;             (cons (list. (cadar e) (car e)) a)))
;     ((eq (caar e) 'lambda)
;      (eval. (caddar e)
;             (append. (pair. (cadar e) (evlis. (cdr e) a))
;                      a)))))
(def eval. (e (o a))
  (if (literal. e) e
      (atom e) (assoc. e a)
      (atom (car e))
      (if (id (car e) 'quote) (cadr e)
          (id (car e) 'atom) (atom (eval. (cadr e) a))
          (id (car e) 'id) (id (eval. (cadr e) a)
                               (eval. (caddr e) a))
          (id (car e) 'car) (car (eval. (cadr e) a))
          (id (car e) 'cdr) (cdr (eval. (cadr e) a))
          (id (car e) 'cons) (cons (eval. (cadr e) a)
                                   (eval. (caddr e) a))
          (id (car e) 'if) (evif. (cdr e) a)
          (eval. (cons (assoc. (car e) a)
                       (cdr e))
                 a))
      (error 'unimplemented)))

; (defun evcon. (c a)
;   (cond ((eval. (caar c) a)
;          (eval. (cadar c) a))
;         ('t (evcon. (cdr c) a))))

(def evif. (c a)
  (if (null. c) nil
      (null. (cdr c)) (eval. (car c) a)
      (eval. (car c) a) (eval. (cadr c) a)
    (evif. (cddr c) a)))
      

; (defun evlis. (m a)
;   (cond ((null. m) '())
;         ('t (cons (eval.  (car m) a)
;                   (evlis. (cdr m) a)))))

; 
